library(readr)
library(dplyr)
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
library(readr)
library(dplyr)
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
View(current)
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
library(readr)
library(dplyr)
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
temp <- current$PCDGx
temp
return(temp)
length(x)
length(temp)
trans5 <- function(x){
erg <- x[1:length(x)]
for (i in 1:length(x)) {
erg[i] <- x[i+1]/x[i] - 1
}
return(diff(erg))
}
temp <- current$PCDGx
temp
trans5(temp)
5/1-1
76.6269/5 - 1
14.32538 - 4
1.032538e+01
View(current)
current[3,] %>% is.na()
current[3,] %>% is.na() %>% all()
current[3,] %>% !is.na() %>% all()
!is.na(current[3,]) %>% all()
current$sasdate
current <- current[-2,]
current
View(current)
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
current <- current[-1,]
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
current <- current[-c(1, 2:25),]
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
library(magrittr)
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
current <- current[-c(1, 3:26),]
current
current %>% head
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
current <- current[-c(1, 3:24),]
!is.na(current[3,]) %>% all()
!is.na(current[2,]) %>% all()
!is.na(current[4,]) %>% all()
!is.na(current[5,]) %>% all()
library(readr)
library(dplyr)
library(magrittr)
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
current <- current[-c(1, 3:24),] # Beginn
current <- current[1:178,] # End
View(current)
library(readr)
library(dplyr)
library(magrittr)
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
current <- current[-c(1, 3:24),] # Beginn
current <- current[1:178,] # End
View(current)
!is.na(current[]) %>% all()
!is.na(current[])
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
current <- current[-c(1, 3:24),] # Beginn
current <- current[1:178,] # End
!is.na(current) %>% all()
!is.na(current)
all(!is.na(current) == TRUE)
all(!is.na(current))
which(is.na(current))
apply(current, 2, is.na())
apply(current, 1, is.na())
apply(current, 1, function(x){is.na(x)})
apply(current, 2, function(x){is.na(x)})
apply(current, 1, function(x){is.na(x)})
apply(current, 1, function(x){all(!is.na(x))})
temp <- apply(current, 1, function(x){all(!is.na(x))})
temp %>% length
current %>% dim
temp <- apply(current, 2, function(x){all(!is.na(x))})
temp
temp %>% length
miss_val <- apply(current, 2, function(x){all(!is.na(x))})
miss_val
where(miss_val)
which(miss_val)
which(miss_val == F)
which(miss_val == FALSE)
miss_val <- apply(current, 2, function(x){all(!is.na(x))}) %>% which(miss_val == FALSE)
miss_val
miss_val <- which(apply(current, 2, function(x){all(!is.na(x))}) == FALSE)
miss_val
miss_val %>% class
miss_val %>% names
current %>% select(-miss_val)
library(magrittr)
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
current <- current[-c(1, 3:24),] # Beginn
current <- current[1:178,] # End
current %>% dim
miss_val <- which(apply(current, 2, function(x){all(!is.na(x))}) == FALSE)
miss_val %>% length
current %<>% select(-miss_val)
current %>% dim
249-220
current
current
c(1,2,3,45)
c(1,2,3,4,5)
temp <- c(1,2,3,4,5)
diff(c)
diff(temp)
diff(diff(temp))
temp
temp[-1:2]
temp[-(1:2)]
max(current[1.])
max(current[1,])
current1,
current[1,]
current[1,-1] %>% max()
current[1,-1] %>% mmin()
current[1,-1] %>% min()
current
current[1,1]
current[-1,1]
current %>% tail
current[,1] %>% tail
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
current <- current[-c(1, 3:24),] # Beginn
current <- current[1:179,] # End
miss_val <- which(apply(current, 2, function(x){all(!is.na(x))}) == FALSE)
current %<>% select(-miss_val)
current[1,1] <- NA
current[,1] %>% tail
current[-1,1]
seq(1964.5, 2008.75, 0.25) %>% length
current[-1,1] <- seq(1964.5, 2008.75, 0.25)
current$sasdate %>% class()
current[-1,1] <- seq(1964.5, 2008.75, 0.25) %>% as.numeric()
current$sasdate %>% class()
current$sasdate  <- current$sasdate %>% as.numeric()
current %>% str()
View(current)
# standardization
Transfct <- function(x){
code <- x[1]
data <- x[-1]
Tob <- length(data)
if(code == 1) {
erg <- data[-(1:2)]
} else if(code == 2){
erg_temp <- diff(data)
erg <- erg_temp[-1]
} else if(code == 3){
erg <- diff(diff(data))
} else if(code == 4){
erg_temp <- log(data)
erg <- erg_temp[-(1:2)]
} else if(code == 5){
erg_temp <- diff(log(data))
erg <- erg_temp[-1]
} else if(code == 6){
erg <- diff(diff(log(data)))
} else if(code == 7){
erg_temp <- rep(NA, Tob-1)
for (i in 1:(Tob-1)) {
erg_temp[i] <- x[i+1]/x[i] - 1
}
erg <- diff(erg_temp)
} else {stop("Invalid transformation code!")}
return(erg)
}
current[,-1]
apply(current[,-1], 2, Transfct)
apply(current[,-1], 2, Transfct) %>% dim()
apply(current[,-1], 2, Transfct) %>% is.na()
temp <- apply(current[,-1], 2, Transfct)
mean(temp)
temp <- apply(current[,-1], 2, Transfct)
temp %>% dim
current[,1]
current[,1] %>% length()
current[,1] %>% dim
Mccr <- cbind(current[-(1:3),1],apply(current[,-1], 2, Transfct))
all(!is.na(Mccr))
Mccr %>% colname
Mccr %>% colname()
colnames(Mccr)
colnames(Mccr)[1] <- "time"
pcfac <- function(data, r){
## PC factor extraction
## data must be (TxN)
nvars <- dim(data)[2]
xx <- t(data)%*%data# X'X is proportional to covariance matrix
eigen_x <- eigen(xx)
# applying the factor restricition
lam <- sqrt(nvars)*eigen_x[[2]][,c(1:r)] # lam'lam/n = I. loadings are, where n = number of time series in x
factors <- data%*%lam/nvars
return(list(factors, lam))
}
temp <- pcfac(Mccr[,-1], 4)
Mccr %>% class
temp <- pcfac(Mccr[,-1] %>% as.matrix(), 4)
temp
temp2 <- princomp(Mccr[,-1])
temp2 <- princomp(Mccr[,-1]%>% as.matrix())
temp2 <- princomp(Mccr[,-1] %>% as.matrix())
Mccr[,-1]
Mccr[,-1] %>% View
# test
data <- Mccr[,-1] %>% as.matrix()
r <- 4
## PC factor extraction
## data must be (TxN)
nvars <- dim(data)[2]
nvars
xx <- t(data)%*%data# X'X is proportional to covariance matrix
eigen_x <- eigen(xx)
eigen_x
eigen_x %>% dim
xx <- t(data)%*%data# X'X is proportional to covariance matrix
eigen_x <- eigen(xx)
xx <- dim
## PC factor extraction
## data must be (TxN)
nvars <- dim(data)[2]
xx <- t(data)%*%data# X'X is proportional to covariance matrix
xx %>% dim
eigen_x <- eigen(xx)
# applying the factor restricition
lam <- sqrt(nvars)*eigen_x[[2]][,c(1:r)] # lam'lam/n = I. loadings are, where n = number of time series in x
lam
t(lam) %*% lam
sqrt(nvars)
1/sqrt(nvars)
nvars
# applying the factor restricition
lam <- eigen_x[[2]][,c(1:r)]/nvar # lam'lam/n = I. loadings are, where n = number of time series in x
# applying the factor restricition
lam <- eigen_x[[2]][,c(1:r)]/nvars # lam'lam/n = I. loadings are, where n = number of time series in x
t(lam) %*% lam
xx <- t(data)%*%data# X'X is proportional to covariance matrix
eigen_x <- eigen(xx)
# applying the factor restricition
lam <- sqrt(nvars)*eigen_x[[2]][,c(1:r)] # lam'lam/n = I. loadings are, where n = number of time series in x
## PC factor extraction
## data must be (TxN)
Tob <- dim(data)[1]
nvars <- dim(data)[2]
xx <- t(data)%*%data/Tob# X'X is proportional to covariance matrix
eigen_x <- eigen(xx)
# applying the factor restricition
lam <- eigen_x[[2]][,c(1:r)] # lam'lam/n = I. loadings are, where n = number of time series in x
t(lam) %*% lam
lam %>% dim()
Tob
nvars
data %>% dim
data%*%lam
data%*%lam/nvars
# test
data <- Mccr[,-1] %>% as.matrix()
r <- 4
## PC factor extraction
## data must be (TxN)
nvars <- dim(data)[2]
xx <- t(data)%*%data# X'X is proportional to covariance matrix
eigen_x <- eigen(xx)
# applying the factor restricition
lam <- sqrt(nvars)*eigen_x[[2]][,c(1:anzahlfac)] # lam'lam/n = I. loadings are, where n = number of time series in x
# applying the factor restricition
lam <- sqrt(nvars)*eigen_x[[2]][,c(1:r)] # lam'lam/n = I. loadings are, where n = number of time series in x
t(lam) %*% lam / nvars
t(lam) %*% lam
library(readr)
library(dplyr)
library(magrittr)
current <- read_csv("fred-database_code/current.csv", na = "NA", col_types = c(.default = col_double(), sasdate = col_character()))
current <- current[-c(1, 3:24),] # Beginn
current <- current[1:179,] # End
View(current)
miss_val <- which(apply(current, 2, function(x){all(!is.na(x))}) == FALSE)
current %<>% select(-miss_val)
current[1,1] <- NA
current[-1,1] <- seq(1964.5, 2008.75, 0.25)
current$sasdate  <- current$sasdate %>% as.numeric()
# Data Transformation
Transfct <- function(x){
code <- x[1]
data <- x[-1]
Tob <- length(data)
if(code == 1) {
erg <- data[-(1:2)]
} else if(code == 2){
erg_temp <- diff(data)
erg <- erg_temp[-1]
} else if(code == 3){
erg <- diff(diff(data))
} else if(code == 4){
erg_temp <- log(data)
erg <- erg_temp[-(1:2)]
} else if(code == 5){
erg_temp <- diff(log(data))
erg <- erg_temp[-1]
} else if(code == 6){
erg <- diff(diff(log(data)))
} else if(code == 7){
erg_temp <- rep(NA, Tob-1)
for (i in 1:(Tob-1)) {
erg_temp[i] <- x[i+1]/x[i] - 1
}
erg <- diff(erg_temp)
} else {stop("Invalid transformation code!")}
return(erg)
}
Mccr <- cbind(current[-(1:3),1],apply(current[,-1], 2, Transfct))
colnames(Mccr)[1] <- "time"
pcfac <- function(data, r){
## PC factor extraction
## data must be (TxN)
nvars <- dim(data)[2]
xx <- t(data)%*%data# X'X is proportional to covariance matrix
eigen_x <- eigen(xx)
# applying the factor restricition
lam <- sqrt(nvars)*eigen_x[[2]][,c(1:r)] # lam'lam/n = I. loadings are, where n = number of time series in x
factors <- data%*%lam/nvars
return(list(factors, lam))
}
lambda
pcfac <- function(data, r){
## PC factor extraction
## data must be (TxN)
nvars <- dim(data)[2]
xx <- t(data)%*%data# X'X is proportional to covariance matrix
eigen_x <- eigen(xx)
# applying the factor restricition
lam <- sqrt(nvars)*eigen_x[[2]][,c(1:r)] # lam'lam/n = I. loadings are, where n = number of time series in x
factors <- data%*%lam/nvars
return(list("F" = factors, "Lambda" = lam))
}
temp <- pcfac(Mccr[,-1] %>% as.matrix(), 4)
PCs <- pcfac(Mccr[,-1] %>% as.matrix(), 4)
